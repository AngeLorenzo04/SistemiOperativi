
{
	"librerie":{
		"prefix": "lib",
		"body": [
			"#include <stdio.h> //Standard I/O: printf, BUFSIZ",
			"#include <fcntl.h> //File CoNTrol: open, O_RDONLY, O_WRONLY, O_RDWR, O_CREAT(crea se non esiste), O_APPEND(solo R o RW)",
			"//O_TRUNC(distrugge contenuto se esiste, O_EXCL(fallisce se il file esiste gia'), O_NDELAY (non bloccante per FIFO e pipe in W)",
			"#include <stdlib.h> //STanDard LIBrary: exit, malloc, calloc, atoi",
			"#include <unistd.h> //UNIx Standard: read, write, close, SEEK_SET, SEEK_CUR, SEEK_END",
			"#include <string.h> //STRING: strlen, strcpy, strcat",
			"#include <sys/stat.h> //SYStem STATus: stat, fstat, S_IFMT, S_IFDIR, S_IFREG",
			"#include <sys/wait.h> //SYStem WAIT: wait",
			"#include <errno.h> //ERror NUmber: errno",
			"#include <sys/types.h> //SYStem TYPES: pid_t",
			"#include <ctype.h> //ISoType: isdigit, isalpha, isalnum",
			"#define PERM 077 /*Permessi da dare al file creato*/",
			"typedef int pipe_t[2]; /* Tipo per creare più pipe */"
		]
	},
	"main": {
		"prefix": "main",
		"body": [
			"int main(int argc, char* argv[]) {",
			"    $1",
			"    exit(0);",
			"}"
		]
	},
		"start main": {
		"prefix": "start",
		"body": [
			"int main(void) {",
			"    $1",
			"    return 0;",
			"}"
		]
	},

	"variabili":{
		"prefix": "var",
		"body": [
			"/*------ VARIABILI USATE ------*/",
			"int fd;                    /* file descriptor */",
			"char Cx;                   /* variabile che conterrà un singolo carattere */",
			"char buffer;               /* Buffer dove verra memorizzato il carattere che stiamo analizzando */",
			"int pid;                   /* Variabile che conterrà il valore di ritorno di fork */",
			"int status;                /* Variabile che conterrà lo stato di un figlio */",
			"int pidFiglio;             /* Variabile che conterrà il pid del figlio*/",
			"int ritorno;               /* Variabile che conterrà il ritrono del filgio*/",
			"int nread;                 /* Numero variabili lette da read*/",
			"int N;                     /* Numero di figli */",
			"int n;                     /* Contatore */",
			"pipe_t* pipePadreFiglio;   /* Canale di comunicazione padre-filgio */",
			"pipe_t pipeFiglioNipote;   /* Canale di comunicazione padre-filgio */",
		],
	},
	"controllo parametri stretto": {
		"prefix": "stretto",
		"body": [
			"/*Controllo parametri STRETTO*/",
			"if (argc != $1){",
			"    printf(\"ERRORE: numero parametri non valido\\nSUGGERIMENTO: inserire esattamente $2 parametri\\n\");",
			"    exit($3);",
			"}"
		]
	},
	"controllo parametri lasco": {
		"prefix": "lasco",
		"body": [
			"/*Controllo parametri LASCO*/",
			"if (argc < $1){",
			"    printf(\"ERRORE: numero parametri insufficiente\\nSUGGERIMENTO: inserire almeno $2 argomenti\\n\");",
			"    exit($3);",
			"}"
		]
	},
	"controllo caratteri":{
		"prefix": "ischar",
		"body": [
			"/* controllo che il parametro sia una carattere */",
			"if(strlen(argv[$1]) != 1){",
        	"   printf(\"ERRORE: parametro %s non valido\\nSUGGERIMENTO: inserire un singolo carattere\",argv[$2]);",
        	"   exit($3);",
			"}"
		]
	},
	"controllo file":{
		"prefix": "isfile",
		"body": [
			"/* controllo che il parametro sia un file */",
			"if(($1=open(argv[$2],O_RDWR)) < 0 ){ //APRO IL FILE",
			"   printf(\"ERRORE: parametro %s non valido\\nSUGGERIMENTO: inserire il nome di un file\\n\",argv[$2]);",
			"   exit($3);",
			"}"
		]
	},
	"controllo numerico":{
		"prefix": "isnumb",
		"body": [
			"/* controllo che il parametro sia un valore numerico */",
    		"N = atoi(argv[$1]);",
    		"if (N <= 0){",
        	"   printf(\"ERRORE: parametro non valido %s\\nSUGGERIMETNO: inserire un intero positivo\\n\",argv[$2]);",
        	"   exit($3);",
    		"}"

		]	
	},
	"stampa nome e numero parametri":{
		"prefix": "nameparam",
		"body": [
			"/* Stampo il nome del programam e il numero di parametri passati */",
    		"printf(\"::::::::::::::::::::::::::::::::::\\n nome del eseguibile: %s\\n numero parametri: %d \\n::::::::::::::::::::::::::::::::::\\n\",argv[0],argc - 1);"
		]
	},
	"fork":{
		"prefix": "fork",
		"body": [
			"if ((pid = fork()) < 0) { /* creazione con verifica del processo figlio */",
			"    /* fork fallita */",
			"    printf(\"Errore in fork\\n\");",
			"    exit($1);",
			"}",
			"if (pid == 0) {",
			" /* codice eseguito dal processo figlio*/",
			"   $2",
			"   exit($3);",
			"}",
			"/* codice eseguito solo dal processo padre*/"
		]	
	},
	"wait e controllo del parametro passato dal filgio":{
		"prefix": "wait",
		"body": [
			"if((pidFiglio = wait(&status)) < 0){ // assegamo a pid il pid del figlio e a status lo stato del filgio ",
			"    printf(\"ERRORE: wait ha fallito\\n\");",
			"    exit($1);",
			"}",
			"if ((status & 0xFF) != 0){ //verificare che lo status sia valido2",
			"   printf(\"Figlio terminato in modo anomalo\\n\");",
			"    exit($2);",
			"}else { //estraggo il valore passato dal figlio",
			"    ritorno = status >> 8;",
			"    /* selezione degli 8 bit piu’ significativi */",
			"    ritorno &= 0xFF;",
			"    printf(\"Il filgio %d con pid %d ha ritornato %d\\n\",n,pidFiglio,ritorno);",
			"}"
		]
	},
	"read" :{
		"prefix": "read",
		"body": [
			"if((read($1,$2,$3)) < 0){ /* Leggo */",
			"   printf(\"ERRORE: qualcosa è andato storto nella letttura $4\");",
			"   exit(-1);",
			"}"
		]
	},
	"write" :{
		"prefix": "write",
		"body": [
			"if((write($1,$2,$3)) < 0){ /* Scrivo */",
			"   printf(\"ERRORE: qualcosa è andato storto nella scrittura $4\\n\");",
			"   exit(-1);",
			"}"
		]
	},
	"pipe" :{
		"prefix": "pipe",
		"body": [
			"/*Creo canale di comunicazione tra padre e filgio*/",
			"if(pipe($1) < 0){",
			"   printf(\"ERRORE: qualcosa e' andato storto nella creazione della pipe\\n\");",
			"   exit($2);",
			"}"

		]
	},
	"creat":{
		"prefix": "creat",
		"body": [
			"/*Creazione del file */",
            "if (($1=creat($2, PERM)) < 0){",
            "   printf(\"DEBUG-FILGIO Impossibile creare il file %s\\n\", $2);",
            "   exit(-1);",
           "}",
			"/* chiudiamo il file creato dato che comunque il figlio non lo usa */",
			"close($1);"
		]
	},

	"creazione di un array di pipe":{
		"prefix": "npipe",
		"body": [

			"/* allocazione dell'array di N pipe */",
  			"$1 = (pipe_t *)malloc(N * sizeof(pipe_t));",
  			"if ($1 == NULL) {",
    		"   printf(\"Errore nella allocazione array dinamico per le pipe\\n\");",
    		"   exit(3);",
  			"}",
			"/* Creazione delle N pipe */",
    		"for(n=0;n<N;n++){",
    		"   if(pipe($1[n]) < 0 ){",
    		"      printf(\"ERRORE: qualcosa e' andato storto nella creazione delle pipe\\n\");",
    		"      exit(3);",
    		"   }",
    		"}"

		]
	},
	"chiusura del canale di lettura di N pipe":{
		"prefix": "close0npipe",
		"body": [

			"/* Chiusura del canale di lettura di N pipe */",
			"for(int k=0;k<N;k++){",
            "   close($1[k][0]);",
            "   if(k != n){",
            "        close($1[k][1]); /* Chiusura dei canali di scrittura che non ci interessano */",
            "   }",
            "}"
		]
	},
	"chiusura del canale di scrittura di N pipe":{
		"prefix": "close1npipe",
		"body": [

			"/* Chiusura del canale di scrittura di N pipe */",
			"for(n=0;n<N;n++){",
        	"   close($1[n][1]);",
		    "}"
		
		]

	},
	"se il file non esiste crealo":{
		"prefix": "exists",
		"body": [

    		"if(($1=open(\"$2\",O_RDONLY|O_APPEND|O_CREAT,PERM)) < 0){",
			"   printf(\" Errore nella creazione del file\\n \");",
			"   exit($3);",
    		"}"
		]
	}



}
